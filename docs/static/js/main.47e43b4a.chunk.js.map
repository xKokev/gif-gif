{"version":3,"sources":["components/AddCategory.js","helpers/getFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","event","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","getFetchGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","defaultCategories","ReactDOM","render","document","getElementById"],"mappings":"qLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAkBhD,OACE,uBAAMC,SAZa,SAACC,GACpBA,EAAMC,iBAIFJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKhB,UACE,4BAAID,IACJ,uBACEQ,KAAK,OACLC,MAAOT,EACPU,SArBoB,SAACP,GACzBF,EAAcE,EAAMQ,OAAOF,QAqBvBG,YAAY,mB,+BC5BPC,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACpBC,EADoB,iDAC4BC,UACpDH,GAFwB,8DAIHI,MAAMF,GAJH,cAIpBG,EAJoB,gBAKHA,EAASC,OALN,uBAKlBC,EALkB,EAKlBA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXZ,kBAenBM,GAfmB,4CAAH,sDCGZO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACdf,mBAAS,CAAEsB,KAAM,GAAIa,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OAXAC,qBAAU,WACRxB,EAAaC,GAAUwB,MAAK,SAACC,GAC3BC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAEV,UAEJ,CAACpB,IAEGqB,EDV2BM,CAAa3B,GAAjCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GACC,mBAAGJ,UAAU,mCAAb,wBAGF,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEbnBiB,EAAe,SAAC,GAAqC,IAAD,IAAlCC,yBAAkC,MAAd,CAAC,OAAa,IAC3B5C,mBAAS4C,GADkB,mBACxDpC,EADwD,KAC5CT,EAD4C,KAG/D,OACE,qCACE,0CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACGS,EAAWgB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCZxB8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.47e43b4a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setinputValue] = useState('');\n\n  const handleInputChange = (event) => {\n    setinputValue(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    //  console.log('handleSubmit Run', inputValue);\n\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setinputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>{inputValue}</p>\n      <input\n        type='text'\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder='Search Gif'\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getFetchGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=9&api_key=JeeWKM4pXxeFy1ne8EhjO11BtYtTCNb5`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\n      {loading && (\n        <p className='animate__animated animate__flash'>Loading...</p>\n      )}\n\n      <div className='card-grid'>\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { getFetchGifs } from '../helpers/getFetchGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    getFetchGifs(category).then((imgs) => {\n      setTimeout(() => {\n        setState({\n          data: imgs,\n          loading: false,\n        });\n      }, 500);\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n// Functional Component\n\nexport const GifExpertApp = ({ defaultCategories = ['Dog'] }) => {\n  const [categories, setCategories] = useState(defaultCategories);\n\n  return (\n    <>\n      <h2>GIF GIF </h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}